//! This file was autogenerated.  Do not manually edit.
use super::*;
#[allow(missing_docs)]
pub struct Autocomplete;
/**The autocomplete operator performs a search for a word or phrase that
contains a sequence of characters from an incomplete input string. The
fields that you intend to query with the autocomplete operator must be
indexed with the autocomplete data type in the collection's index definition.
*/
///
///For more details, see the [autocomplete operator reference](https://www.mongodb.com/docs/atlas/atlas-search/autocomplete/).
pub fn autocomplete(
    path: impl StringOrArray,
    query: impl StringOrArray,
) -> SearchOperator<Autocomplete> {
    SearchOperator::new(
        "autocomplete",
        doc! {
            "path" : path.to_bson(), "query" : query.to_bson(),
        },
    )
}
impl SearchOperator<Autocomplete> {
    #[allow(missing_docs)]
    pub fn token_order(mut self, token_order: TokenOrder) -> Self {
        self.spec.insert("tokenOrder", token_order.name());
        self
    }
    #[allow(missing_docs)]
    pub fn fuzzy(mut self, fuzzy: Document) -> Self {
        self.spec.insert("fuzzy", fuzzy);
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Compound;
/**The compound operator combines two or more operators into a single query.
Each element of a compound query is called a clause, and each clause
consists of one or more sub-queries.
*/
///
///For more details, see the [compound operator reference](https://www.mongodb.com/docs/atlas/atlas-search/compound/).
pub fn compound() -> SearchOperator<Compound> {
    SearchOperator::new("compound", doc! {})
}
impl SearchOperator<Compound> {
    #[allow(missing_docs)]
    pub fn must(mut self, must: impl IntoIterator<Item = impl SearchOperatorParam>) -> Self {
        self.spec.insert(
            "must",
            must.into_iter().map(|o| o.to_bson()).collect::<Vec<_>>(),
        );
        self
    }
    #[allow(missing_docs)]
    pub fn must_not(
        mut self,
        must_not: impl IntoIterator<Item = impl SearchOperatorParam>,
    ) -> Self {
        self.spec.insert(
            "mustNot",
            must_not
                .into_iter()
                .map(|o| o.to_bson())
                .collect::<Vec<_>>(),
        );
        self
    }
    #[allow(missing_docs)]
    pub fn should(mut self, should: impl IntoIterator<Item = impl SearchOperatorParam>) -> Self {
        self.spec.insert(
            "should",
            should.into_iter().map(|o| o.to_bson()).collect::<Vec<_>>(),
        );
        self
    }
    #[allow(missing_docs)]
    pub fn filter(mut self, filter: impl IntoIterator<Item = impl SearchOperatorParam>) -> Self {
        self.spec.insert(
            "filter",
            filter.into_iter().map(|o| o.to_bson()).collect::<Vec<_>>(),
        );
        self
    }
    #[allow(missing_docs)]
    pub fn minimum_should_match(mut self, minimum_should_match: i32) -> Self {
        self.spec.insert("minimumShouldMatch", minimum_should_match);
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct EmbeddedDocument;
/**The embeddedDocument operator is similar to $elemMatch operator.
It constrains multiple query predicates to be satisfied from a single
element of an array of embedded documents. embeddedDocument can be used only
for queries over fields of the embeddedDocuments
*/
///
///For more details, see the [embeddedDocument operator reference](https://www.mongodb.com/docs/atlas/atlas-search/embedded-document/).
pub fn embedded_document(
    path: impl StringOrArray,
    operator: impl SearchOperatorParam,
) -> SearchOperator<EmbeddedDocument> {
    SearchOperator::new(
        "embeddedDocument",
        doc! {
            "path" : path.to_bson(), "operator" : operator.to_bson(),
        },
    )
}
impl SearchOperator<EmbeddedDocument> {
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Equals;
/**The equals operator checks whether a field matches a value you specify.
 * */
///
///For more details, see the [equals operator reference](https://www.mongodb.com/docs/atlas/atlas-search/equals/).
pub fn equals(path: impl StringOrArray, value: impl Into<Bson>) -> SearchOperator<Equals> {
    SearchOperator::new(
        "equals",
        doc! {
            "path" : path.to_bson(), "value" : value.into(),
        },
    )
}
impl SearchOperator<Equals> {
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Exists;
/**The exists operator tests if a path to a specified indexed field name exists in a document.
 * */
///
///For more details, see the [exists operator reference](https://www.mongodb.com/docs/atlas/atlas-search/exists/).
pub fn exists(path: impl StringOrArray) -> SearchOperator<Exists> {
    SearchOperator::new(
        "exists",
        doc! {
            "path" : path.to_bson(),
        },
    )
}
impl SearchOperator<Exists> {
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Facet;
/**The facet collector groups results by values or ranges in the specified
faceted fields and returns the count for each of those groups.
*/
///
///For more details, see the [facet operator reference](https://www.mongodb.com/docs/atlas/atlas-search/facet/).
pub fn facet(facets: Document) -> SearchOperator<Facet> {
    SearchOperator::new(
        "facet",
        doc! {
            "facets" : facets,
        },
    )
}
impl SearchOperator<Facet> {
    #[allow(missing_docs)]
    pub fn operator(mut self, operator: impl SearchOperatorParam) -> Self {
        self.spec.insert("operator", operator.to_bson());
        self
    }
}
#[allow(missing_docs)]
pub struct GeoShape;
/**The geoShape operator supports querying shapes with a relation to a given
geometry if indexShapes is set to true in the index definition.
*/
///
///For more details, see the [geoShape operator reference](https://www.mongodb.com/docs/atlas/atlas-search/geoShape/).
pub fn geo_shape(
    path: impl StringOrArray,
    relation: Relation,
    geometry: Document,
) -> SearchOperator<GeoShape> {
    SearchOperator::new(
        "geoShape",
        doc! {
            "path" : path.to_bson(), "relation" : relation.name(), "geometry" : geometry,
        },
    )
}
impl SearchOperator<GeoShape> {
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct GeoWithin;
/**The geoWithin operator supports querying geographic points within a given
geometry. Only points are returned, even if indexShapes value is true in
the index definition.
*/
///
///For more details, see the [geoWithin operator reference](https://www.mongodb.com/docs/atlas/atlas-search/geoWithin/).
pub fn geo_within(path: impl StringOrArray) -> SearchOperator<GeoWithin> {
    SearchOperator::new(
        "geoWithin",
        doc! {
            "path" : path.to_bson(),
        },
    )
}
impl SearchOperator<GeoWithin> {
    #[allow(missing_docs)]
    pub fn geo_box(mut self, geo_box: Document) -> Self {
        self.spec.insert("box", geo_box);
        self
    }
    #[allow(missing_docs)]
    pub fn circle(mut self, circle: Document) -> Self {
        self.spec.insert("circle", circle);
        self
    }
    #[allow(missing_docs)]
    pub fn geometry(mut self, geometry: Document) -> Self {
        self.spec.insert("geometry", geometry);
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct SearchIn;
/**The in operator performs a search for an array of BSON values in a field.
 * */
///
///For more details, see the [in operator reference](https://www.mongodb.com/docs/atlas/atlas-search/in/).
pub fn search_in(path: impl StringOrArray, value: impl Into<Bson>) -> SearchOperator<SearchIn> {
    SearchOperator::new(
        "in",
        doc! {
            "path" : path.to_bson(), "value" : value.into(),
        },
    )
}
impl SearchOperator<SearchIn> {
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct MoreLikeThis;
/**The moreLikeThis operator returns documents similar to input documents.
The moreLikeThis operator allows you to build features for your applications
that display similar or alternative results based on one or more given documents.
*/
///
///For more details, see the [moreLikeThis operator reference](https://www.mongodb.com/docs/atlas/atlas-search/moreLikeThis/).
pub fn more_like_this(like: impl DocumentOrArray) -> SearchOperator<MoreLikeThis> {
    SearchOperator::new(
        "moreLikeThis",
        doc! {
            "like" : like.to_bson(),
        },
    )
}
impl SearchOperator<MoreLikeThis> {
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Near;
/**The near operator supports querying and scoring numeric, date, and GeoJSON point values.
 * */
///
///For more details, see the [near operator reference](https://www.mongodb.com/docs/atlas/atlas-search/near/).
pub fn near(
    path: impl StringOrArray,
    origin: impl NearOrigin,
    pivot: impl BsonNumber,
) -> SearchOperator<Near> {
    SearchOperator::new(
        "near",
        doc! {
            "path" : path.to_bson(), "origin" : origin.to_bson(), "pivot" : pivot
            .to_bson(),
        },
    )
}
impl SearchOperator<Near> {
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Phrase;
/**The phrase operator performs search for documents containing an ordered sequence of terms
 * using the analyzer specified in the index configuration.
 * */
///
///For more details, see the [phrase operator reference](https://www.mongodb.com/docs/atlas/atlas-search/phrase/).
pub fn phrase(path: impl StringOrArray, query: impl StringOrArray) -> SearchOperator<Phrase> {
    SearchOperator::new(
        "phrase",
        doc! {
            "path" : path.to_bson(), "query" : query.to_bson(),
        },
    )
}
impl SearchOperator<Phrase> {
    #[allow(missing_docs)]
    pub fn slop(mut self, slop: i32) -> Self {
        self.spec.insert("slop", slop);
        self
    }
    #[allow(missing_docs)]
    pub fn synonyms(mut self, synonyms: impl AsRef<str>) -> Self {
        self.spec.insert("synonyms", synonyms.as_ref());
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct QueryString;
///
///
///For more details, see the [queryString operator reference](https://www.mongodb.com/docs/atlas/atlas-search/queryString/).
pub fn query_string(
    default_path: impl StringOrArray,
    query: impl AsRef<str>,
) -> SearchOperator<QueryString> {
    SearchOperator::new(
        "queryString",
        doc! {
            "defaultPath" : default_path.to_bson(), "query" : query.as_ref(),
        },
    )
}
impl SearchOperator<QueryString> {}
#[allow(missing_docs)]
pub struct Range;
/**The range operator supports querying and scoring numeric, date, and string values.
You can use this operator to find results that are within a given numeric, date, objectId, or letter (from the English alphabet) range.
*/
///
///For more details, see the [range operator reference](https://www.mongodb.com/docs/atlas/atlas-search/range/).
pub fn range(path: impl StringOrArray) -> SearchOperator<Range> {
    SearchOperator::new(
        "range",
        doc! {
            "path" : path.to_bson(),
        },
    )
}
impl SearchOperator<Range> {
    #[allow(missing_docs)]
    pub fn gt(mut self, gt: impl RangeValue) -> Self {
        self.spec.insert("gt", gt.to_bson());
        self
    }
    #[allow(missing_docs)]
    pub fn gte(mut self, gte: impl RangeValue) -> Self {
        self.spec.insert("gte", gte.to_bson());
        self
    }
    #[allow(missing_docs)]
    pub fn lt(mut self, lt: impl RangeValue) -> Self {
        self.spec.insert("lt", lt.to_bson());
        self
    }
    #[allow(missing_docs)]
    pub fn lte(mut self, lte: impl RangeValue) -> Self {
        self.spec.insert("lte", lte.to_bson());
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Regex;
/**regex interprets the query field as a regular expression.
regex is a term-level operator, meaning that the query field isn't analyzed.
*/
///
///For more details, see the [regex operator reference](https://www.mongodb.com/docs/atlas/atlas-search/regex/).
pub fn regex(path: impl StringOrArray, query: impl AsRef<str>) -> SearchOperator<Regex> {
    SearchOperator::new(
        "regex",
        doc! {
            "path" : path.to_bson(), "query" : query.as_ref(),
        },
    )
}
impl SearchOperator<Regex> {
    #[allow(missing_docs)]
    pub fn allow_analyzed_field(mut self, allow_analyzed_field: bool) -> Self {
        self.spec.insert("allowAnalyzedField", allow_analyzed_field);
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Text;
/**The text operator performs a full-text search using the analyzer that you specify in the index configuration.
If you omit an analyzer, the text operator uses the default standard analyzer.
*/
///
///For more details, see the [text operator reference](https://www.mongodb.com/docs/atlas/atlas-search/text/).
pub fn text(path: impl StringOrArray, query: impl StringOrArray) -> SearchOperator<Text> {
    SearchOperator::new(
        "text",
        doc! {
            "path" : path.to_bson(), "query" : query.to_bson(),
        },
    )
}
impl SearchOperator<Text> {
    #[allow(missing_docs)]
    pub fn fuzzy(mut self, fuzzy: Document) -> Self {
        self.spec.insert("fuzzy", fuzzy);
        self
    }
    #[allow(missing_docs)]
    pub fn match_criteria(mut self, match_criteria: MatchCriteria) -> Self {
        self.spec.insert("matchCriteria", match_criteria.name());
        self
    }
    #[allow(missing_docs)]
    pub fn synonyms(mut self, synonyms: impl AsRef<str>) -> Self {
        self.spec.insert("synonyms", synonyms.as_ref());
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Wildcard;
/**The wildcard operator enables queries which use special characters in the search string that
 * can match any character.
 * */
///
///For more details, see the [wildcard operator reference](https://www.mongodb.com/docs/atlas/atlas-search/wildcard/).
pub fn wildcard(path: impl StringOrArray, query: impl AsRef<str>) -> SearchOperator<Wildcard> {
    SearchOperator::new(
        "wildcard",
        doc! {
            "path" : path.to_bson(), "query" : query.as_ref(),
        },
    )
}
impl SearchOperator<Wildcard> {
    #[allow(missing_docs)]
    pub fn allow_analyzed_field(mut self, allow_analyzed_field: bool) -> Self {
        self.spec.insert("allowAnalyzedField", allow_analyzed_field);
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.spec.insert("score", score);
        self
    }
}
