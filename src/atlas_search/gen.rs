//! This file was autogenerated.  Do not manually edit.
use super::*;
#[allow(missing_docs)]
pub struct Autocomplete;
impl AtlasSearch<Autocomplete> {
    /**The autocomplete operator performs a search for a word or phrase that
    contains a sequence of characters from an incomplete input string. The
    fields that you intend to query with the autocomplete operator must be
    indexed with the autocomplete data type in the collection's index definition.
    */
    ///
    ///For more details, see the [autocomplete operator reference](https://www.mongodb.com/docs/atlas/atlas-search/autocomplete/).
    pub fn autocomplete(path: impl StringOrArray, query: impl StringOrArray) -> Self {
        AtlasSearch {
            name: "autocomplete",
            stage: doc! {
                "path" : path.to_bson(), "query" : query.to_bson(),
            },
            _t: PhantomData,
        }
    }
    #[allow(missing_docs)]
    pub fn token_order(mut self, token_order: TokenOrder) -> Self {
        self.stage.insert("tokenOrder", token_order.name());
        self
    }
    #[allow(missing_docs)]
    pub fn fuzzy(mut self, fuzzy: Document) -> Self {
        self.stage.insert("fuzzy", fuzzy);
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.stage.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Compound;
impl AtlasSearch<Compound> {
    /**The compound operator combines two or more operators into a single query.
    Each element of a compound query is called a clause, and each clause
    consists of one or more sub-queries.
    */
    ///
    ///For more details, see the [compound operator reference](https://www.mongodb.com/docs/atlas/atlas-search/compound/).
    pub fn compound() -> Self {
        AtlasSearch {
            name: "compound",
            stage: doc! {},
            _t: PhantomData,
        }
    }
    #[allow(missing_docs)]
    pub fn must(mut self, must: impl IntoIterator<Item = impl Into<Document>>) -> Self {
        self.stage
            .insert("must", must.into_iter().map(Into::into).collect::<Vec<_>>());
        self
    }
    #[allow(missing_docs)]
    pub fn must_not(mut self, must_not: impl IntoIterator<Item = impl Into<Document>>) -> Self {
        self.stage.insert(
            "mustNot",
            must_not.into_iter().map(Into::into).collect::<Vec<_>>(),
        );
        self
    }
    #[allow(missing_docs)]
    pub fn should(mut self, should: impl IntoIterator<Item = impl Into<Document>>) -> Self {
        self.stage.insert(
            "should",
            should.into_iter().map(Into::into).collect::<Vec<_>>(),
        );
        self
    }
    #[allow(missing_docs)]
    pub fn filter(mut self, filter: impl IntoIterator<Item = impl Into<Document>>) -> Self {
        self.stage.insert(
            "filter",
            filter.into_iter().map(Into::into).collect::<Vec<_>>(),
        );
        self
    }
    #[allow(missing_docs)]
    pub fn minimum_should_match(mut self, minimum_should_match: i32) -> Self {
        self.stage
            .insert("minimumShouldMatch", minimum_should_match);
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.stage.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct EmbeddedDocument;
impl AtlasSearch<EmbeddedDocument> {
    /**The embeddedDocument operator is similar to $elemMatch operator.
    It constrains multiple query predicates to be satisfied from a single
    element of an array of embedded documents. embeddedDocument can be used only
    for queries over fields of the embeddedDocuments
    */
    ///
    ///For more details, see the [embeddedDocument operator reference](https://www.mongodb.com/docs/atlas/atlas-search/embedded-document/).
    pub fn embedded_document(path: impl StringOrArray, operator: impl Into<Document>) -> Self {
        AtlasSearch {
            name: "embeddedDocument",
            stage: doc! {
                "path" : path.to_bson(), "operator" : operator.into(),
            },
            _t: PhantomData,
        }
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.stage.insert("score", score);
        self
    }
}
#[allow(missing_docs)]
pub struct Text;
impl AtlasSearch<Text> {
    /**The text operator performs a full-text search using the analyzer that you specify in the index configuration.
    If you omit an analyzer, the text operator uses the default standard analyzer.
    */
    ///
    ///For more details, see the [text operator reference](https://www.mongodb.com/docs/atlas/atlas-search/text/).
    pub fn text(path: impl StringOrArray, query: impl StringOrArray) -> Self {
        AtlasSearch {
            name: "text",
            stage: doc! {
                "path" : path.to_bson(), "query" : query.to_bson(),
            },
            _t: PhantomData,
        }
    }
    #[allow(missing_docs)]
    pub fn fuzzy(mut self, fuzzy: Document) -> Self {
        self.stage.insert("fuzzy", fuzzy);
        self
    }
    #[allow(missing_docs)]
    pub fn match_criteria(mut self, match_criteria: MatchCriteria) -> Self {
        self.stage.insert("matchCriteria", match_criteria.name());
        self
    }
    #[allow(missing_docs)]
    pub fn synonyms(mut self, synonyms: impl AsRef<str>) -> Self {
        self.stage.insert("synonyms", synonyms.as_ref());
        self
    }
    #[allow(missing_docs)]
    pub fn score(mut self, score: Document) -> Self {
        self.stage.insert("score", score);
        self
    }
}
/// Atlas Search constructor functions without the `AtlasSearch::` prefix; can be useful to
/// improve readability when constructing deeply nested searches.
pub mod short {
    use super::*;
    /**The autocomplete operator performs a search for a word or phrase that
    contains a sequence of characters from an incomplete input string. The
    fields that you intend to query with the autocomplete operator must be
    indexed with the autocomplete data type in the collection's index definition.
    */
    ///
    ///For more details, see the [autocomplete operator reference](https://www.mongodb.com/docs/atlas/atlas-search/autocomplete/).
    pub fn autocomplete(
        path: impl StringOrArray,
        query: impl StringOrArray,
    ) -> AtlasSearch<Autocomplete> {
        AtlasSearch::autocomplete(path, query)
    }
    /**The compound operator combines two or more operators into a single query.
    Each element of a compound query is called a clause, and each clause
    consists of one or more sub-queries.
    */
    ///
    ///For more details, see the [compound operator reference](https://www.mongodb.com/docs/atlas/atlas-search/compound/).
    pub fn compound() -> AtlasSearch<Compound> {
        AtlasSearch::compound()
    }
    /**The embeddedDocument operator is similar to $elemMatch operator.
    It constrains multiple query predicates to be satisfied from a single
    element of an array of embedded documents. embeddedDocument can be used only
    for queries over fields of the embeddedDocuments
    */
    ///
    ///For more details, see the [embeddedDocument operator reference](https://www.mongodb.com/docs/atlas/atlas-search/embedded-document/).
    pub fn embedded_document(
        path: impl StringOrArray,
        operator: impl Into<Document>,
    ) -> AtlasSearch<EmbeddedDocument> {
        AtlasSearch::embedded_document(path, operator)
    }
    /**The text operator performs a full-text search using the analyzer that you specify in the index configuration.
    If you omit an analyzer, the text operator uses the default standard analyzer.
    */
    ///
    ///For more details, see the [text operator reference](https://www.mongodb.com/docs/atlas/atlas-search/text/).
    pub fn text(path: impl StringOrArray, query: impl StringOrArray) -> AtlasSearch<Text> {
        AtlasSearch::text(path, query)
    }
}
